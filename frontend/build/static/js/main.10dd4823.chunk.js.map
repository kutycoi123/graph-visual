{"version":3,"sources":["components/constants.js","components/GraphBoard/GraphBoard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Mode","RUN","DRAWNODE","MOVE","REMOVENODE","REMOVEEDGE","DRAWEDGE","RESETGRAPH","FINISH","RESETALGO","COLOR_MAPPING","0","1","2","3","4","5","6","7","8","9","10","isOverlapped","x","y","nodes","node","Math","sqrt","pow","create_node","id","floor","random","neighbors","CREATE_UNDIRECTIONAL_GRAPH","nNodes","i","push","maxNeighbors","parseInt","length","fromNode","j","toNode","round","edges","neighbors_edges","map","from","to","weight","concat","get_edges","calculateIntersection","x1","y1","x2","y2","dist","ratio","GraphBoard","props","random_graph","useState","setNodes","setEdges","nodeCnt","setNodeCnt","undefined","pairNode","setPairNode","colorReset","setColorReset","mode","algo","service","handleChangeMode","graph","useRef","clickedNode","replaceNode","newAttributes","idx","findIndex","e","newNodes","replaceEdge","newEdges","handleDrawNode","newNode","color","current","onclick","onmousedown","event","elem","target","classList","contains","onmousemove","offsetX","offsetY","setAttribute","nextElementSibling","handleMoveNode","getAttribute","onmouseup","includes","console","log","nodeIdx","splice","filter","neighborId","edge","handleRemoveNode","setTimeout","find","split","fromId","toId","useEffect","alert","axios","url","method","headers","data","then","res","trace","colorEdge","parent","clearTimeout","colorNode","catch","nodes_dict","colors","coloredNodes","colorNodeHandler","status","colorEdge1","colorEdge2","mst","resetAlgo","ref","className","style","fill","cx","cy","r","intersectPoint1","intersectPoint2","midpoint","theta","atan2","PI","cos","sin","calculateCurve","markerWidth","markerHeight","refX","refY","orient","points","d","stroke","markerEnd","onClick","prompt","Main","setMode","setAlgo","setService","showModal","setShowModal","handleClose","for","name","onChange","value","classnames","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.10dd4823.chunk.js","sourcesContent":["\r\nexport const Mode = {\r\n\tRUN: 1,\r\n\tDRAWNODE: 2,\r\n\tMOVE: 3,\r\n\tREMOVENODE: 4,\r\n\tREMOVEEDGE: 5,\r\n\tDRAWEDGE: 6,\r\n\tRESETGRAPH: 7,\r\n\tFINISH: 8,\r\n\tRESETALGO: 9,\r\n\r\n};\r\nexport const NODE_RADIUS = 30;\r\nexport const COLOR_MAPPING = {\r\n\t0: '#eb4034',\r\n\t1: '#f7a92a',\r\n\t2: '#f7e62a',\r\n\t3: '#b6f72a',\r\n\t4: '#2af7f0',\r\n\t5: '#2a7ff7',\r\n\t6: '#5a2af7',\r\n\t7: '#d12af7',\r\n\t8: '#f72acb',\r\n\t9: '#f72a67',\r\n\t10: '#f72a2a',\r\n\r\n}\r\nfunction isOverlapped(x, y, nodes){\r\n\tfor (let node of nodes) {\r\n\t\tif (Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y,2)) < 2*NODE_RADIUS) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\nfunction get_edges(nodes) {\r\n\tlet edges = [];\r\n\tfor (let node of nodes) {\r\n\t\tlet neighbors_edges = node.neighbors.map(id => {\r\n\t\t\treturn {from: node.id, to: id, weight: 0, id: `${node.id} ${id}`};\r\n\t\t})\r\n\t\tedges = edges.concat(neighbors_edges);\r\n\t}\r\n\treturn edges;\r\n}\r\nfunction create_node(id, nodes) {\r\n\tlet x, y;\r\n\tdo {\r\n\t\tx = Math.floor(Math.random() * 1000 + 30);\r\n\t\ty = Math.floor(Math.random() * 700 + 20);\r\n\t}while(isOverlapped(x, y, nodes));\r\n\t\r\n\treturn {x, y, id, neighbors: []};\r\n}\r\n\r\nexport function CREATE_UNDIRECTIONAL_GRAPH(nNodes) {\r\n\tlet nodes = [];\r\n\tfor (let i = 0; i < nNodes; ++i) {\r\n\t\tnodes.push(create_node(i, nodes));\r\n\t}\r\n\tlet maxNeighbors = parseInt(nNodes / 2);\r\n\tfor (let i = 0; i < nodes.length; ++i)  {\r\n\t\tlet fromNode = nodes[i];\r\n\t\tfor (let j = 0; j < nodes.length && fromNode.neighbors.length < maxNeighbors; ++j) {\r\n\t\t\tif (j == i) continue;\r\n\t\t\tlet toNode = nodes[j];\r\n\t\t\tlet is_neighbor = Math.round(Math.random() * 1);\r\n\t\t\tif (is_neighbor) {\r\n\t\t\t\tfromNode.neighbors.push(toNode.id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\tlet edges = get_edges(nodes);\r\n\treturn {nodes, edges};\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react';\r\nimport {Mode, NODE_RADIUS, COLOR_MAPPING, CREATE_UNDIRECTIONAL_GRAPH} from '../constants.js';\r\nimport axios from 'axios';\r\nimport './GraphBoard.css';\r\n\r\nconst URL = \"http://localhost:5000\";\r\nconst calculateCurve = ( x1, y1, x2, y2 ) => {\r\n  let theta = Math.atan2(y2 - y1, x2 - x1) - Math.PI / 2;\r\n  let offset = 50;\r\n  let x = (x2 + x1) * 0.5 + offset * Math.cos(theta);\r\n  let y = (y2 + y1) * 0.5 + offset * Math.sin(theta);\r\n  return {x, y};\r\n};\r\nconst calculateIntersection = (x1, y1, x2, y2) => {\r\n  let dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  let ratio = (dist - NODE_RADIUS) / dist; \r\n  let dx = (x2 - x1) * ratio;\r\n  let dy = (y2 - y1) * ratio;\r\n  let intersectX = x1 + dx;\r\n  let intersectY = y1 + dy;\r\n  return { x: intersectX, y: intersectY };\r\n};\r\n\r\nfunction GraphBoard(props) {\r\n\tlet random_graph = CREATE_UNDIRECTIONAL_GRAPH(5);\r\n\r\n\tconst [nodes, setNodes] = useState(random_graph.nodes);\r\n\tconst [edges, setEdges] = useState(random_graph.edges);\r\n\tconst [nodeCnt, setNodeCnt] = useState(nodes.length);\r\n\tconst [pairNode, setPairNode] = useState({\r\n\t\tfrom: undefined,\r\n\t\tto: undefined\r\n\t});\r\n\tconst [colorReset, setColorReset] = useState(true);\r\n\r\n\tconst {\r\n\t\tmode, algo, service, handleChangeMode\r\n\t} = props;\r\n\tconst graph = useRef();\r\n\tconst clickedNode = useRef();\r\n\r\n\r\n\tconst resetAlgo = () => {\r\n\t\tlet newNodes = nodes.map(e => {\r\n\t\t\treturn {...e, color: \"white\"};\r\n\t\t});\r\n\t\tlet newEdges = edges.map(e => {\r\n\t\t\treturn {...e, color: \"white\"}\r\n\t\t})\r\n\t\tsetNodes(newNodes);\r\n\t\tsetEdges(newEdges);\r\n\t\tsetColorReset(true);\r\n\t}\r\n\r\n\tconst replaceNode = (id, newAttributes, nodes) => {\r\n\t\tconst idx = nodes.findIndex(e => e.id === id);\r\n\t\tif (idx > -1) {\r\n\t\t\tconst newNodes = [...nodes];\r\n\t\t\tnewNodes[idx] = {...nodes[idx], ...newAttributes};\r\n\t\t\treturn newNodes;\r\n\t\t}\r\n\t\treturn nodes;\r\n\t}\r\n\tconst replaceEdge = (from, to, newAttributes, edges) => {\r\n\t\tconst idx = edges.findIndex(e => e.from === from && e.to === to);\r\n\t\tif (idx > -1) {\r\n\t\t\tconst newEdges = [...edges];\r\n\t\t\tnewEdges[idx] = {...edges[idx], ...newAttributes};\r\n\t\t\treturn newEdges;\r\n\t\t}\r\n\t\treturn edges;\r\n\t}\r\n\tconst isOverlapped = (x, y) => {\r\n\t\tfor (let node of nodes) {\r\n\t\t\tif (Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y,2)) <= NODE_RADIUS) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tconst handleDrawNode = (x, y) => {\r\n\t\t// Add new node with position (x,y)\r\n\t\t// Make sure (x,y) does not overlap with any node\r\n\t\tif (!isOverlapped(x, y)) {\r\n\t\t\t// Add new node\r\n\t\t\tconst newNode = {id: nodeCnt, x, y, color: 0, neighbors: []}\r\n\t\t\tsetNodes([...nodes, newNode])\r\n\t\t\tsetNodeCnt(nodeCnt+1)\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst handleMoveNode = (id, x, y) => {\r\n\t\tlet newNode = {id, x, y};\r\n\t\tconst newNodes = replaceNode(id, newNode, nodes);\r\n\t\tsetNodes(newNodes);\r\n\t}\r\n\r\n\tconst handleRemoveNode = (id) => {\r\n\t\t// Remove node with given id\r\n\tconst nodeIdx = nodes.findIndex((node) => node.id === id)\r\n\t\tif (nodeIdx > -1) {\r\n\t\t\tlet newNodes = [...nodes];\r\n\t\t\tnewNodes.splice(nodeIdx, 1);\r\n\t\t\tnewNodes = newNodes.map(e => {\r\n\t\t\t\te.neighbors = e.neighbors.filter(neighborId => neighborId !== id);\r\n\t\t\t\treturn e;\r\n\t\t\t})\r\n\t\t\tconst newEdges = edges.filter((edge) => edge.from !== id && edge.to !== id);\r\n\t\t\tsetEdges(newEdges);\r\n\t\t\tsetNodes(newNodes);\r\n\t\t}\r\n\t}\r\n\tconst handleRemoveEdge = (id) => {\r\n\t\t// Remove edge with given edge id\r\n\t\tconst edgeIdx = edges.findIndex((edge) => edge.id === id)\r\n\t\tif (edgeIdx > -1) {\r\n\t\t\tconst newEdges = [...edges]\r\n\t\t\tnewEdges.splice(edgeIdx, 1);\r\n\t\t\tsetEdges(newEdges);\r\n\t\t}\r\n\t}\r\n\tconst handleClick = (event) => {\r\n\t\tif (mode === Mode.DRAWNODE) {\r\n\t\t\tconsole.log(event);\r\n\t\t\thandleDrawNode(event.offsetX, event.offsetY);\r\n\t\t} else if (mode === Mode.REMOVENODE && event.target.classList.contains(\"node\")) {\r\n\t\t\tconst id = parseInt(event.target.getAttribute('id'));\r\n\t\t\tif (id == 0 || id) {\r\n\t\t\t\thandleRemoveNode(id);\r\n\t\t\t}\r\n\t\t} else if (mode == Mode.DRAWEDGE && event.target.classList.contains(\"node\")) {\r\n\t\t\tconst id = parseInt(event.target.getAttribute('id'));\r\n\t\t\tif (id == 0 || id) {\r\n\t\t\t\tif (pairNode.from == undefined) {\r\n\t\t\t\t\tconst newNodes = replaceNode(id, {color: \"red\"}, nodes)\r\n\t\t\t\t\tsetPairNode({...pairNode, from: id});\r\n\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t} else if (pairNode.to == undefined) {\r\n\t\t\t\t\tconst newNodes = replaceNode(id, {color: \"green\"}, nodes)\r\n\t\t\t\t\tsetPairNode({...pairNode, to: id});\r\n\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tconst fromNode = nodes.find(e => e.id === pairNode.from);\r\n\t\t\t\t\t\tconst toNode = nodes.find(e => e.id === id);\r\n\t\t\t\t\t\tfromNode.color = toNode.color = \"white\";\r\n\t\t\t\t\t\tfromNode.neighbors.push(toNode.id);\r\n\t\t\t\t\t\t//toNode.neighbors.push(fromNode.id);\r\n\t\t\t\t\t\tconst newEdges = [...edges, {from: fromNode.id, to: toNode.id, weight: 0, id: `${fromNode.id} ${toNode.id}`}]\r\n\t\t\t\t\t\tconst newNodes = [...nodes];\r\n\t\t\t\t\t\tsetPairNode({});\r\n\t\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t}, 300)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (mode == Mode.REMOVEEDGE && event.target.classList.contains(\"edge\")) {\r\n\t\t\tconst id = event.target.getAttribute('id').split(\" \");\r\n\t\t\tconst fromId = parseInt(id[0])\r\n\t\t\tconst toId = parseInt(id[1]);\r\n\t\t\tconst newEdges = edges.filter(e => e.from !== fromId || e.to !== toId)\r\n\t\t\tconst fromNode = nodes.find(e => e.id === fromId);\r\n\t\t\tconst toNode = nodes.find(e => e.id === toId);\r\n\t\t\tfromNode.neighbors = fromNode.neighbors.filter(id => id !== toId);\r\n\t\t\ttoNode.neighbors = toNode.neighbors.filter(id => id !== fromId);\r\n\t\t\tconst newNodes = [...nodes];\r\n\t\t\tsetEdges(newEdges);\r\n\t\t\tsetNodes(newNodes);\r\n\t\t}\r\n\t}\r\n\tconst handleStartDrag = (event) => {\r\n\t\tconst elem = event.target;\r\n\t\tif (elem.classList.contains(\"draggable\")) {\r\n\t\t\tclickedNode.current = elem;\r\n\t\t}\r\n\t} \r\n\tconst handleDragging = (event) => {\r\n\t\tif (event.target.classList.contains(\"draggable\") && clickedNode.current) {\r\n\t\t\tlet x = event.offsetX;\r\n\t\t\tlet y = event.offsetY;\r\n\t\t\tclickedNode.current.setAttribute(\"cx\", x);\r\n\t\t\tclickedNode.current.setAttribute(\"cy\", y);\r\n\t\t\tclickedNode.current.nextElementSibling.setAttribute(\"x\", x);\r\n\t\t\tclickedNode.current.nextElementSibling.setAttribute(\"y\", y+4);\r\n\t\t\thandleMoveNode(parseInt(clickedNode.current.getAttribute('id')), x, y);\r\n\t\t}\r\n\t}\r\n\tconst handleEndDrag = (event) => {\r\n\t\tclickedNode.current = undefined;\r\n\t}\r\n\r\n\tif (mode !== undefined) {\r\n\t\tif (mode === Mode.MOVE) {\r\n\t\t\tgraph.current.onclick = undefined;\r\n\t\t\tgraph.current.onmousedown = handleStartDrag;\r\n\t\t\tgraph.current.onmousemove = handleDragging;\r\n\t\t\tgraph.current.onmouseup = handleEndDrag;\r\n\t\t} else{\r\n\t\t\tif ([Mode.DRAWNODE, Mode.DRAWEDGE, Mode.REMOVEEDGE, Mode.REMOVENODE].includes(mode)) {\r\n\t\t\t\tgraph.current.onclick = handleClick;\r\n\t\t\t} else if (mode === Mode.RESETGRAPH) {\r\n\t\t\t\tgraph.current.onclick = undefined;\r\n\t\t\t}\r\n\t\t\tgraph.current.onmousedown = undefined;\r\n\t\t\tgraph.current.onmousemove = undefined;\r\n\t\t\tgraph.current.onmouseup = undefined;\r\n\t\t}\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (mode === Mode.RESETGRAPH) {\r\n\t\t\tsetEdges([]);\r\n\t\t\tsetNodes([]);\r\n\t\t\tsetColorReset(true);\r\n\t\t\tsetNodeCnt(0);\r\n\t\t} else if (mode === Mode.RUN) {\r\n\t\t\tif (!colorReset) {\r\n\t\t\t\talert(`Please reset the algorithm by clicking \"Reset algorithm\" button before running new one`);\r\n\t\t\t}\r\n\t\t\telse if (nodes.length == 0) {\r\n\t\t\t\talert(\"Please add some nodes in order to run algorithms\");\r\n\t\t\t} else if (algo === 'bfs' || algo === 'dfs') {\r\n\t\t\t\taxios({\r\n\t\t\t\t\turl: `${URL}/api/${service}/${algo}`,\r\n\t\t\t\t\tmethod: \"post\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\"nodes\": nodes.map(e => {\r\n\t\t\t\t\t\t\treturn {id: e.id, neighbors: e.neighbors};\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\"edges\": edges,\r\n\t\t\t\t\t\t\"startNode\": {id: nodes[0].id, neighbors: nodes[0].neighbors}\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(res => {\r\n\t\t\t\t\tlet trace = res.data;\r\n\t\t\t\t\tlet i = 1;\r\n\t\t\t\t\tlet newNodes = nodes;\r\n\t\t\t\t\tlet newEdges = edges;\r\n\t\t\t\t\tfor (let node of trace) {\r\n\t\t\t\t\t\tlet colorEdge = setTimeout(() => {\r\n\t\t\t\t\t\t\tnewEdges = replaceEdge(node.parent, node.id, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\tclearTimeout(colorEdge);\r\n\t\t\t\t\t\t}, 900*i);\r\n\t\t\t\t\t\tlet colorNode = setTimeout(() => {\r\n\t\t\t\t\t\t\tnewNodes = replaceNode(node.id, {color: \"red\"}, newNodes);\r\n\t\t\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t\t\t\tclearTimeout(colorNode);\r\n\t\t\t\t\t\t}, 901*i)\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t\tsetColorReset(false);\r\n\t\t\t\t}).catch(e => {\r\n\r\n\t\t\t\t})\r\n\t\t\t} else if (algo == \"coloring\") {\r\n\t\t\t\tlet nodes_dict = {};\r\n\t\t\t\tnodes.map(e => nodes_dict[e.id] = e.neighbors);\r\n\t\t\t\taxios({\r\n\t\t\t\t\turl: `${URL}/api/${service}/${algo}`,\r\n\t\t\t\t\tmethod: \"post\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\"nodes\": nodes.map(e => {\r\n\t\t\t\t\t\t\treturn {id: e.id, neighbors: e.neighbors};\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\"edges\": edges,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(res => {\r\n\t\t\t\t\tlet colors = res.data\r\n\t\t\t\t\tlet coloredNodes = nodes.map(e => {\r\n\t\t\t\t\t\treturn {...e, color: COLOR_MAPPING[colors[e.id]]}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlet i = 1;\r\n\t\t\t\t\tlet newNodes = nodes;\r\n\t\t\t\t\tfor (let node of coloredNodes) {\r\n\t\t\t\t\t\tlet colorNodeHandler = setTimeout(() => {\r\n\t\t\t\t\t\t\tnewNodes = replaceNode(node.id, {color: node.color}, newNodes);\r\n\t\t\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t\t\t\tclearTimeout(colorNodeHandler);\r\n\t\t\t\t\t\t}, 900*i);\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetColorReset(false);\r\n\t\t\t\t})\r\n\t\t\t} else if (algo == \"dijkstra\") {\r\n\t\t\t\taxios({\r\n\t\t\t\t\turl: `${URL}/api/${service}/${algo}`,\r\n\t\t\t\t\tmethod: \"post\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\"nodes\": nodes.map(e => {\r\n\t\t\t\t\t\t\treturn {id: e.id, neighbors: e.neighbors};\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\"edges\": edges,\r\n\t\t\t\t\t\t\"startNode\": {id: nodes[0].id, neighbors: nodes[0].neighbors}\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(res => {\r\n\t\t\t\t\tlet trace = res.data;\r\n\t\t\t\t\tlet i = 1;\r\n\t\t\t\t\tlet newNodes = nodes;\r\n\t\t\t\t\tlet newEdges = edges;\r\n\t\t\t\t\tfor (let node of trace) {\r\n\t\t\t\t\t\tif (node.status==\"visited\") {\r\n\t\t\t\t\t\t\tlet colorNode = setTimeout(() => {\r\n\t\t\t\t\t\t\t\tnewNodes = replaceNode(node.id, {color: \"red\"}, newNodes);\r\n\t\t\t\t\t\t\t\tsetNodes(newNodes);\r\n\t\t\t\t\t\t\t\tclearTimeout(colorNode);\r\n\t\t\t\t\t\t\t}, 1000*i)\r\n\t\t\t\t\t\t\tlet colorEdge = setTimeout(() => {\r\n\t\t\t\t\t\t\t\tnewEdges = replaceEdge(node.parent, node.id, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\t\tclearTimeout(colorEdge);\r\n\t\t\t\t\t\t\t}, 1002*i);\t\t\t\t\t\t\t        \r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet colorEdge1 = setTimeout(() => {\r\n\t\t\t\t\t\t\t\tnewEdges = replaceEdge(node.parent, node.id, {color: \"red\"}, newEdges);\r\n\t\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\tsetEdges(newEdges);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tclearTimeout(colorEdge1);\r\n\t\t\t\t\t\t\t\tlet colorEdge2 = setTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tnewEdges = replaceEdge(node.parent, node.id, {color: \"white\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\t\t\tclearTimeout(colorEdge2);\r\n\t\t\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t\t\t}, 1000*i);\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetColorReset(false);\t\t\t\t\t\r\n\t\t\t\t})\r\n\t\t\t} else if(algo == \"mst\") {\r\n\r\n\t\t\t\taxios({\r\n\t\t\t\t\turl: `${URL}/api/${service}/${algo}`,\r\n\t\t\t\t\tmethod: \"post\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\"nodes\": nodes.map(e => {\r\n\t\t\t\t\t\t\treturn {id: e.id, neighbors: e.neighbors};\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\"edges\": edges,\r\n\t\t\t\t\t}\r\n\t\t\t\t}).then(res => {\r\n\t\t\t\t\tlet mst = res.data;\r\n\t\t\t\t\tlet newEdges = [...edges];\r\n\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\tfor (let edge of mst) {\r\n\t\t\t\t\t\tlet colorEdge1 = setTimeout(() => {\r\n\t\t\t\t\t\t\tnewEdges = replaceEdge(edge.from, edge.to, {color: \"red\"}, newEdges);\r\n\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\tclearTimeout(colorEdge1);\r\n\t\t\t\t\t\t\tif (edge[\"selected\"]){\r\n\t\t\t\t\t\t\t\tlet colorEdge2 = setTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tnewEdges = replaceEdge(edge.from, edge.to, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\t\t\tclearTimeout(colorEdge2);\r\n\t\t\t\t\t\t\t\t}, 1000);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tlet colorEdge2 = setTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tnewEdges = replaceEdge(edge.from, edge.to, {color: \"white\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\t//newEdges = replaceEdge(node.id, node.parent, {color: \"green\"}, newEdges);\r\n\t\t\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\t\t\tclearTimeout(colorEdge2);\r\n\t\t\t\t\t\t\t\t}, 1000);\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 1000*i);\r\n\r\n\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\tsetColorReset(false);\t\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\thandleChangeMode(Mode.FINISH);\r\n\t\t} else if (mode == Mode.RESETALGO) {\r\n\t\t\tresetAlgo();\r\n\t\t}\r\n\t}, [mode])\r\n\treturn (\r\n\t\t<svg ref={graph} className=\"graph\">\r\n\t\t\t{nodes.map((e, idx) => {\r\n\t\t\t\tlet drawnEdges = {};\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<g className=\"nodegroup\">\r\n\r\n\t\t\t\t\t<circle\r\n\t\t\t        \t//onMouseDown={() => console.log(\"Node mouse down\")}\r\n\t\t\t\t        className=\"draggable node\"\r\n\t\t\t\t        style={{fill: e.color || \"white\"}}\r\n\t\t\t\t        cx={e.x}\r\n\t\t\t\t        cy={e.y}\r\n\t\t\t\t        r={NODE_RADIUS}\r\n\t\t\t\t        id={e.id}\r\n\t\t\t\t      \t>\r\n\t\t\t\t      </circle>\r\n\r\n\t\t\t      \t<text className=\"nodelabel\" x={e.x} y={e.y+4}>{e.id}</text>\r\n\t\t\t\t\t</g>\r\n\r\n\t\t\t    )\r\n\t\t\t})}\r\n\t\t\t{edges.map((e, idx) => {\r\n\t\t\t\tconst fromNode = nodes.find(node => node.id == e.from);\r\n\t\t\t\tconst toNode = nodes.find(node => node.id == e.to);\r\n\t\t\t\tconst intersectPoint1 = calculateIntersection(fromNode.x, fromNode.y, toNode.x, toNode.y);\r\n\t\t\t\tconst intersectPoint2 = calculateIntersection(toNode.x, toNode.y, fromNode.x, fromNode.y);\r\n\t\t\t\tconst midpoint = calculateCurve(intersectPoint2.x, intersectPoint2.y, intersectPoint1.x, intersectPoint1.y);\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<g>\r\n\t\t\t\t\t<marker\r\n\t                    className={\"arrow\"}\r\n\t                    id={`arrowhead${e.from}${e.to}`}\r\n\t                    markerWidth=\"10\"\r\n\t                    markerHeight=\"7\"\r\n\t                    refX=\"8.7\"\r\n\t                    refY=\"3.5\"\r\n\t                    orient=\"auto\"\r\n                  \t>\r\n                    \t<polygon points=\"0 0, 10 3.5, 0 7\" />\r\n                  \t</marker>\r\n\t\t\t\t\t<path \r\n\t\t\t\t\t\td={`M${intersectPoint2.x} ${intersectPoint2.y} Q${midpoint.x} ${midpoint.y} ${intersectPoint1.x} ${intersectPoint1.y}`}\r\n\t\t\t\t\t\tclassName=\"edge\"\r\n\t\t\t\t\t\tid={e.id}\r\n\t\t\t\t\t\tstyle={{stroke: e.color || \"white\"}}\r\n\t\t\t\t\t\tmarkerEnd={`url(#arrowhead${e.from}${e.to})`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (mode == Mode.REMOVEEDGE) {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet weight = parseInt(prompt(`Please set a weight for edge from node ${e.from} to node ${e.to}`));\r\n\t\t\t\t\t\t\tif (weight >= 0) {\r\n\t\t\t\t\t\t\t\tlet newEdges = [...edges];\r\n\t\t\t\t\t\t\t\tlet edge = newEdges.find(edge => e.id == edge.id);\r\n\t\t\t\t\t\t\t\tedge.weight = weight;\r\n\t\t\t\t\t\t\t\tsetEdges(newEdges);\r\n\t\t\t\t\t\t\t}else if(weight < 0) {\r\n\t\t\t\t\t\t\t\talert(\"Weight must be a number and non-negative\")\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<text\r\n                      className=\"edge-weight\"\r\n                      x={Math.atan2(fromNode.y-toNode.y, fromNode.x-toNode.x) < 0 ? midpoint.x : midpoint.x }\r\n                      y={Math.atan2(fromNode.y-toNode.y, fromNode.x-toNode.x) < 0 ? midpoint.y - 5 : midpoint.y + 5 }\r\n                    >\r\n                      {e.weight}\r\n                    </text>\r\n\t\t\t\t\t</g>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\r\n\t\t</svg>\t\r\n\r\n\t\r\n\t);\r\n}\r\n\r\nexport default GraphBoard;","import React, {useState, useEffect} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport GraphBoard from './GraphBoard/GraphBoard.js';\r\nimport classnames from 'classnames';\r\nimport {Mode} from './constants.js';\r\n\r\n/*\r\nNode: {\r\n\tid,x,y,color,neighbors\r\n}\r\nEdge: {\r\n\tid, start(id of start node), end(id of end node)\r\n}\r\n\r\n*/\r\nfunction Main() {\r\n\r\n\tconst [mode, setMode] = useState();\r\n\tconst [algo, setAlgo] = useState(\"bfs\");\r\n\tconst [service, setService] = useState(\"python\");\r\n\tconst [showModal, setShowModal] = useState(true);\r\n\tconst handleChangeMode = (mode) => {\r\n\t\tsetMode(mode);\r\n\t}\t\r\n\tconst handleClose = () => setShowModal(false);\r\n  \tconst handleShow = () => setShowModal(true);\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t<div className=\"header\">\r\n\t\t\t<form>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-2 col-form-label\" for=\"algo-select\">Choose an algorithm:</label>\r\n\t\t\t\t\t<div className=\"col-sm-10\">\r\n\t\t\t\t\t\t<select name=\"algo\" id=\"algo-select\" onChange={(e) => setAlgo(e.target.value)}>\r\n\t\t\t\t\t\t\t<option value=\"bfs\">Breadth First Search</option>\r\n\t\t\t\t\t\t\t<option value=\"dfs\">Depth First Search</option>\r\n\t\t\t\t\t\t\t<option value=\"coloring\">Graph coloring with minimum number of colors</option>\r\n\t\t\t\t\t\t\t<option value=\"dijkstra\">Shortest Path - Dijkstra algorithm</option>\r\n\t\t\t\t\t\t\t<option value=\"mst\">Minimum Spanning Tree - Kruskal algorithm</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-2 col-form-label\" for=\"service-select\">Choose a server:</label>\r\n\t\t\t\t\t<div className=\"col-sm-10\">\r\n\t\t\t\t\t\t<select name=\"service\" id=\"service-select\" onChange={(e) => setService(e.target.value)}>\r\n\t\t\t\t\t\t\t<option value=\"python\">Python</option>\r\n\t\t\t\t\t\t\t<option value=\"go\">Golang</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<button className={classnames({\"btn_focus\": mode==Mode.RUN})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.RUN)}>Run algorithm</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.DRAWNODE})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.DRAWNODE)}\r\n\t\t\t\t>\r\n\t\t\t\t\t\tDraw node\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.MOVE})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.MOVE)}\r\n\t\t\t\t>\r\n\t\t\t\t\tMove node\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.REMOVENODE})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.REMOVENODE)}\r\n\t\t\t\t>\r\n\t\t\t\t\tRemove node\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.DRAWEDGE})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.DRAWEDGE)}\r\n\t\t\t\t>\r\n\t\t\t\t\tDraw edge\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.REMOVEEDGE})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.REMOVEEDGE)}\r\n\t\t\t\t>\r\n\t\t\t\t\tRemove edge\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.RESETALGO})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.RESETALGO)}\r\n\t\t\t\t>\r\n\t\t\t\t\tReset algorithm\r\n\t\t\t\t</button>\t\t\t\t\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName={classnames({\"btn_focus\": mode==Mode.RESETGRAPH})}\r\n\t\t\t\t\tonClick={() => handleChangeMode(Mode.RESETGRAPH)}\r\n\t\t\t\t>\r\n\t\t\t\t\tReset graph\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tonClick={handleShow}\r\n\t\t\t\t>\r\n\t\t\t\t\tInstructions\r\n\t\t\t\t</button>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"graph-board\">\r\n\t\t\t\t<GraphBoard \r\n\t\t\t\t\tmode={mode}\r\n\t\t\t\t\talgo={algo}\r\n\t\t\t\t\tservice={service}\r\n\t\t\t\t\thandleChangeMode={handleChangeMode}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<Modal show={showModal} onHide={handleClose}>\r\n\t\t        <Modal.Header closeButton>\r\n\t\t          <Modal.Title>App instructions</Modal.Title>\r\n\t\t        </Modal.Header>\r\n\t\t        <Modal.Body>\r\n\t\t\t\t\tThis app is developed to visualize some graph algorithms.\r\n\t\t\t\t\t<p>There are a header, which includes buttons, and canvas, which is the main area to display graph</p>\r\n\t\t        \t<p>There are 9 buttons on the header, all of which will help you interact with graph \r\n\t\t        \tby specific operations:</p>\r\n\t\t        \t<p>1.<strong>Run algorithm</strong>: Send request to run an algorithm to a chosen server</p>\r\n\t\t        \t<p>2.<strong>Draw node</strong>: Draw nodes by clicking on canvas</p>\r\n\t\t        \t<p>3.<strong>Move node</strong>: Move nodes around by dragging them</p>\r\n\t\t        \t<p>4.<strong>Remove node</strong>: Remove nodes by clicking on them</p>\r\n\t\t        \t<p>5.<strong>Draw edge</strong>: Draw a new edge by clicking a source node(red) and a target node(green).</p>\r\n\t\t        \t<p>6.<strong>Remove edge</strong>: Remove edges by clicking on them</p>\r\n\t\t        \t<p>7.<strong>Reset algorithm</strong>: Reset the algorithm and reset color to run new one</p>\r\n\t\t        \t<p>8.<strong>Reset graph</strong>: Remove all nodes and edges</p>\r\n\t\t        \t<p>9.<strong>Instruction</strong>: Display instruction</p>\r\n\t\t        \t<p><strong>Note</strong>: You can edit edge weight by clicking on each edge. \r\n\t\t\t\t\t   You can only do this when you are not in \"Remove edge\" mode.\r\n\t\t\t\t\t</p>\r\n\t\t        </Modal.Body>\r\n\t\t        <Modal.Footer>\r\n\t\t          <Button variant=\"secondary\" onClick={handleClose}>\r\n\t\t            Close\r\n\t\t          </Button>\r\n\t\t        </Modal.Footer>\r\n\t\t    </Modal>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from './components/Main'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Main />\t\t\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}